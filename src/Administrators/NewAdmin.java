/*
 * The MIT License
 *
 * Copyright 2019 User.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package Administrators;

import Administrators.AdminSystem;
import Administrators.AdminQuery;
import Administrators.AdminModel;
import Administrators.AdminDisplayModel;
import Databases.DatabaseConnection;
import heightech.SupplierDisplayModel;
import heightech.Suppliers;
import heightech.UserQuery;
import heightech.UserSetters;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

/**
 *
 * @author User
 */
public class NewAdmin extends javax.swing.JDialog {
  private static final String ADMINTEXT="All The Administrators";
  private static final String USERTEXT="Select The User To Make An Administrator";
    /**
     * Creates new form NewAdmin
     */
    public NewAdmin(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setIcon();
        initComponents();
        this.setLocationRelativeTo(null);
        admin();
        this.setSize(591, 623);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAll = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelShow = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuAdd = new javax.swing.JMenu();
        jMenuEdit = new javax.swing.JMenu();
        jMenuDelete = new javax.swing.JMenu();
        jMenuAdmin = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(46, 204, 113));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ADMINISTRATORS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 572, 69);

        jTableAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAllMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAll);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 110, 383, 351);

        jPanel3.setBackground(new java.awt.Color(0, 74, 208));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heightech/logo1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(389, 68, 183, 510);

        jLabelShow.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabelShow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelShow.setText("All Administrators");
        jPanel1.add(jLabelShow);
        jLabelShow.setBounds(10, 80, 370, 20);

        jMenuBar1.setToolTipText("Manage Administrators");

        jMenuAdd.setText("Add");
        jMenuAdd.setToolTipText("Add a new Administrator");
        jMenuAdd.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuAddMenuSelected(evt);
            }
        });
        jMenuBar1.add(jMenuAdd);

        jMenuEdit.setText("Edit");
        jMenuEdit.setToolTipText("Edit Administrators Features");
        jMenuBar1.add(jMenuEdit);

        jMenuDelete.setText("Delete");
        jMenuDelete.setToolTipText("Delete An Administrator");
        jMenuBar1.add(jMenuDelete);

        jMenuAdmin.setText("Admins");
        jMenuAdmin.setToolTipText("Show Administrators");
        jMenuAdmin.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuAdminMenuSelected(evt);
            }
        });
        jMenuBar1.add(jMenuAdmin);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuAddMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuAddMenuSelected
        /** This ensures if the admin wants to add a new administrator*/
        
        int x = JOptionPane.showConfirmDialog(null, "Do You Want To Add \nA New Administrator?", "NEW ADMIN", YES_NO_OPTION, QUESTION_MESSAGE);
        
        if(x==0)
        {
            /** This informs the admin that he/she is bout to select a user to add*/
            JOptionPane.showMessageDialog(null, "Click Ok To Select The User \n You Want To Add As An \nAdministrator");
            showUser();
        }
    }//GEN-LAST:event_jMenuAddMenuSelected

    
    private void jMenuAdminMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuAdminMenuSelected
        // To Show the Admins Table again
        admin();
    }//GEN-LAST:event_jMenuAdminMenuSelected

    private void jTableAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAllMouseClicked
            if(jLabelShow.getText().equals(USERTEXT))
            {
               setAdmin();
            }
    }//GEN-LAST:event_jTableAllMouseClicked
       /** setting up the logo*/
private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("MainLogo.png")));
    }


/** This function displays all the administators who have got previledges to manipulate their systems */
private void admin()
{
    Connection conn = DatabaseConnection.getConnection();
    PreparedStatement ps;
    ResultSet rs;
    
        try {
            ps = conn.prepareStatement("SELECT COUNT(*) FROM INVENTORY");
            rs = ps.executeQuery();
            
            AdminQuery adminQ = new AdminQuery();
            ArrayList<AdminModel> admin = adminQ.adminSystem();
            // This is a counter
            int j= 1;
            
            //This is initialising the table contents
            String colNames[] = {"", "First Name", "LastName", "Phone Number", "Id Number"};
            Object rows[][] = new Object[admin.size()][5];
            while(rs.next())
            {
                for(int i= 0; i<admin.size(); i++)
                {
                    rows[i][0] = j;
                    rows[i][1] = admin.get(i).getfName();
                    rows[i][2] = admin.get(i).getLName();
                    rows[i][3] = admin.get(i).getPhone();
                    rows[i][4] = admin.get(i).getIdNo();
                    
                    //This is the table model for displaying the items in the database
                    AdminDisplayModel md = new AdminDisplayModel(rows, colNames);
                    jTableAll.setModel(md);
                    
                    //Styling some of the contents of the table in the administrators pane
                      DefaultTableCellRenderer center = new DefaultTableCellRenderer();
                center.setHorizontalAlignment(JLabel.CENTER);
                jTableAll.setDefaultRenderer(String.class, center);
                jTableAll.setRowHeight(30);
                jTableAll.setShowGrid(true);
                jTableAll.setGridColor(Color.black);
                  JTableHeader th =jTableAll.getTableHeader();
                  th.setBackground(Color.gray);
                  th.setFont(new Font("Tahoma",Font.BOLD, 12));
                     th.setForeground(Color.blue);
                    
                     
                     //setting up the textField
                     jLabelShow.setText(ADMINTEXT);
                     //continuing with the counter to go on with the counting of the number of administrators
                    j++;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(NewAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        finally
        {
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(NewAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
}


/** This function displays the users that one wants to make to be an administrator */
private void showUser()
{
    Connection conn = DatabaseConnection.getConnection();
        Statement statement;
        ResultSet rset;
        
        try {
            statement = conn.createStatement();
            rset = statement.executeQuery("SELECT COUNT(*) FROM users");
            
            UserQuery uq = new UserQuery();
            
            ArrayList<UserSetters> sList = uq.usersList();
            
            String[] colNames = {"", "First Name", "Second Name", "Phone Number", "ID Number"};
            Object[][] rows = new Object[sList.size()][6];
            
            int j = 1;
            
            while(rset.next())
            {
                for(int i = 0; i<sList.size(); i++)
                {
                   rows[i][0] = j;
                  rows[i][1] = sList.get(i).getfName();
                  rows[i][2] = sList.get(i).getlName();
                  rows[i][3] = sList.get(i).getPhone();
                  rows[i][4] = sList.get(i).getIdNo();
                 
                  AdminDisplayModel md = new AdminDisplayModel(rows, colNames);
                  jTableAll.setModel(md);
                  jTableAll.setRowHeight(30);
                  
                  DefaultTableCellRenderer center = new DefaultTableCellRenderer();
                center.setHorizontalAlignment(JLabel.CENTER);
                jTableAll.setDefaultRenderer(String.class, center);
                
                  JTableHeader th =jTableAll.getTableHeader();
                  th.setBackground(Color.gray);
                  th.setFont(new Font("Tahoma",Font.BOLD, 12));
                     th.setForeground(Color.blue);
                     
                     
                     //setting the textfield for the show 
                     jLabelShow.setText(USERTEXT);
                    j++;
                }
                
               
            }
        } catch (SQLException ex) {
            Logger.getLogger(Suppliers.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        finally
        {
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(AdminSystem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
}

/** This method is the main part for creating an administrator*/
private void setAdmin()
{
    int selectedIndex = jTableAll.getSelectedRow();
    String fname, lname;
    fname = (String)jTableAll.getValueAt(selectedIndex, 1);
    lname = (String)jTableAll.getValueAt(selectedIndex, 2);
    
    //now to transfer the data
    int x = JOptionPane.showConfirmDialog(null, "Do You Want To Make \n " + fname + " " + lname + " \nAn Admin?");
    if(x == 0)
    {
       Connection conn = DatabaseConnection.getConnection();
       PreparedStatement ps;
       ResultSet rs;
       
        try {
            ps = conn.prepareStatement("INSERT INTO ADMIN(Admin_first, Admin_Last, Admin_Phone, Admin_Id_No) VALUES(?, ?, ?, ?) ");
            ps.setString(1, (String)jTableAll.getValueAt(selectedIndex, 1));
            ps.setString(2, (String)jTableAll.getValueAt(selectedIndex, 2));
            ps.setString(3, (String)jTableAll.getValueAt(selectedIndex, 3));
            ps.setString(4, (String)jTableAll.getValueAt(selectedIndex, 4));
            
            rs = ps.executeQuery();
            
            if(rs.next())
            {
                JOptionPane.showMessageDialog(null, "Admin Created!", "SUCCESS", INFORMATION_MESSAGE);
            }
            
            else
            {
                JOptionPane.showMessageDialog(null, "Something Went Wrong!", "ERROR!", ERROR_MESSAGE);
            }
               
        } catch (SQLException ex) {
            Logger.getLogger(NewAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //terminating the connection afterwards to give room for other connections
        finally
        {
           try {
               conn.close();
           } catch (SQLException ex) {
               Logger.getLogger(NewAdmin.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewAdmin dialog = new NewAdmin(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                       dialog.dispose();
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelShow;
    private javax.swing.JMenu jMenuAdd;
    private javax.swing.JMenu jMenuAdmin;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDelete;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAll;
    // End of variables declaration//GEN-END:variables
}
